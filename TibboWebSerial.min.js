!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define("TibboWebSerial",[],e):"object"==typeof exports?exports.TibboWebSerial=e():t.TibboWebSerial=e()}("undefined"!=typeof self?self:this,function(){return function(t){var e={};function r(n){if(e[n])return e[n].exports;var i=e[n]={i:n,l:!1,exports:{}};return t[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}return r.m=t,r.c=e,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)r.d(n,i,function(e){return t[e]}.bind(null,i));return n},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=0)}([function(t,e,r){"use strict";var n=r(1),i=n(r(2)),o=n(r(5)),a=n(r(6)),u=n(r(7)),s=0,c=1,f=7,l=8,h=13,d=20,p=30,v={DTR:1,RTS:2,CTS:16,DSR:32,RI:64,DCD:128},y={OFF:[0,0,0,0],CTS_RTS:[8,144,0,0],XON_XOFF:[0,19,400,400]},m={index:4,value:17},g={index:5,value:19},x=38400,w=function(){function t(e){(0,a.default)(this,t),this.usb=e,this.baud=x,this.modemState=null,this.DTR=null,this.RTS=null,this.CTS=null,this.DSR=null,this.RI=null,this.DCD=null,this.modemStateChanged=void 0,this.getFlowControlCallback=void 0,this.flowControlChanged=void 0,this.baudChangeOK=void 0,this.serDataArrival=void 0,this.serDataSent=void 0,this.connectFail=void 0,this.connectOK=void 0,this.disconnectOK=void 0,this.connectionError=void 0}return(0,u.default)(t,[{key:"connect",value:function(){var t=(0,o.default)(i.default.mark(function t(){return i.default.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return t.prev=0,t.next=3,this.usb.open();case 3:return t.next=5,this.usb.selectConfiguration(1);case 5:return t.next=7,this.usb.claimInterface(0);case 7:return t.next=9,this.enable();case 9:return t.next=11,this.setBaud(this.baud);case 11:this.setTimers(),this.connectOK&&this.connectOK(),t.next=18;break;case 15:t.prev=15,t.t0=t.catch(0),this.connectFail&&this.connectFail();case 18:case"end":return t.stop()}},t,this,[[0,15]])}));return function(){return t.apply(this,arguments)}}()},{key:"enable",value:function(){var t=(0,o.default)(i.default.mark(function t(){return i.default.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,this.usb.controlTransferOut({requestType:"vendor",recipient:"device",request:s,index:0,value:1});case 2:case"end":return t.stop()}},t,this)}));return function(){return t.apply(this,arguments)}}()},{key:"setTimers",value:function(){void 0!==this.dataTimer&&clearInterval(this.dataTimer),void 0!==this.modemStateTimer&&clearInterval(this.modemStateTimer),this.dataTimer=setInterval(this.readTimer.bind(this),1),this.modemStateTimer=setInterval(this.getModemState.bind(this,this.usb),1),this.canRead=!0}},{key:"disconnect",value:function(){var t=(0,o.default)(i.default.mark(function t(){return i.default.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return clearInterval(this.dataTimer),clearInterval(this.modemStateTimer),t.next=4,this.usb.close();case 4:this.disconnectOK&&this.disconnectOK();case 5:case"end":return t.stop()}},t,this)}));return function(){return t.apply(this,arguments)}}()},{key:"updateModemState",value:function(t){this.modemState=t,this.DTR=(t&v.DTR)>0?1:0,this.RTS=(t&v.RTS)>0?1:0,this.CTS=(t&v.CTS)>0?1:0,this.DSR=(t&v.DSR)>0?1:0,this.RI=(t&v.RI)>0?1:0,this.DCD=(t&v.DCD)>0?1:0}},{key:"setBaud",value:function(){var t=(0,o.default)(i.default.mark(function t(e){var r,n,o;return i.default.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:for(this.baud=e,r=[0,0,0,0],n=0;n<r.length;n++)o=255&e,r[n]=o,e=(e-o)/256;return t.next=5,this.usb.controlTransferOut({requestType:"vendor",recipient:"device",request:p,index:0,value:0},new Uint8Array(r));case 5:this.baudChangeOK&&this.baudChangeOK(this.baud);case 6:case"end":return t.stop()}},t,this)}));return function(e){return t.apply(this,arguments)}}()},{key:"initializeSpecialCharacters",value:function(){var t=(0,o.default)(i.default.mark(function t(){return i.default.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:this.setChar(g.index,g.value),this.setChar(m.index,m.value);case 2:case"end":return t.stop()}},t,this)}));return function(){return t.apply(this,arguments)}}()},{key:"setChar",value:function(){var t=(0,o.default)(i.default.mark(function t(e,r){return i.default.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,this.usb.controlTransferOut({requestType:"vendor",recipient:"device",request:h,index:0,value:e<<8&65280|r});case 2:case"end":return t.stop()}},t,this)}));return function(e,r){return t.apply(this,arguments)}}()},{key:"setMHS",value:function(){var t=(0,o.default)(i.default.mark(function t(e){return i.default.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,this.usb.controlTransferOut({requestType:"vendor",recipient:"device",request:f,index:0,value:768|e});case 2:case"end":return t.stop()}},t,this)}));return function(e){return t.apply(this,arguments)}}()},{key:"getBaud",value:function(){var t=(0,o.default)(i.default.mark(function t(){return i.default.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,this.usb.controlTransferIn({requestType:"vendor",recipient:"device",request:c,index:0,value:0},1);case 2:case"end":return t.stop()}},t,this)}));return function(){return t.apply(this,arguments)}}()},{key:"getModemState",value:function(){var t=(0,o.default)(i.default.mark(function t(){var e;return i.default.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,this.usb.controlTransferIn({requestType:"vendor",recipient:"device",request:l,index:0,value:0},1);case 2:(e=(e=t.sent).data.getInt8())!==this.modemState&&(this.updateModemState(e),this.modemStateChanged&&this.modemStateChanged(this.modemState));case 5:case"end":return t.stop()}},t,this)}));return function(){return t.apply(this,arguments)}}()},{key:"getFlowControl",value:function(){var t=(0,o.default)(i.default.mark(function t(){var e,r,n,o;return i.default.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,this.usb.controlTransferIn({requestType:"vendor",recipient:"device",request:d,index:0,value:0},16);case 2:for(e=t.sent,r=new Int32Array(e.data.buffer),r=JSON.stringify(Array.from(r)),n=Object.entries(y),o=0;o<n.length;o++)JSON.stringify(n[o][1])===r&&this.getFlowControlCallback&&this.getFlowControlCallback(n[o][0]);case 7:case"end":return t.stop()}},t,this)}));return function(){return t.apply(this,arguments)}}()},{key:"setFlowControl",value:function(){var t=(0,o.default)(i.default.mark(function t(e){var r;return i.default.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return r=y[e],t.next=3,this.usb.controlTransferOut({requestType:"vendor",recipient:"device",request:19,index:0,value:0},new Int32Array(r));case 3:this.flowControlChanged&&this.flowControlChanged(e);case 4:case"end":return t.stop()}},t,this)}));return function(e){return t.apply(this,arguments)}}()},{key:"write",value:function(){var t=(0,o.default)(i.default.mark(function t(e){var r,n;return i.default.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:if(new Uint8Array,n=new TextEncoder,!((r=n.encode(e)).length>0)){t.next=7;break}return t.next=6,this.usb.transferOut(2,r);case 6:this.serDataSent&&this.serDataSent(e);case 7:case"end":return t.stop()}},t,this)}));return function(e){return t.apply(this,arguments)}}()},{key:"toggleLINE",value:function(){var t=(0,o.default)(i.default.mark(function t(e){return i.default.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,this.setMHS(e^this.modemState);case 2:console.log("Line toggled");case 3:case"end":return t.stop()}},t,this)}));return function(e){return t.apply(this,arguments)}}()},{key:"read",value:function(){var t=(0,o.default)(i.default.mark(function t(){var e;return i.default.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,this.usb.transferIn(2,64);case 2:return e=t.sent,t.abrupt("return",new Uint8Array(e.data.buffer));case 4:case"end":return t.stop()}},t,this)}));return function(){return t.apply(this,arguments)}}()},{key:"readTimer",value:function(){var t=(0,o.default)(i.default.mark(function t(){var e,r;return i.default.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:if(!this.canRead||null===this.usb){t.next=13;break}return this.canRead=!1,t.prev=2,t.next=5,this.read();case 5:(e=t.sent)&&void 0!==this.serDataArrival&&(r=new TextDecoder,this.serDataArrival(r.decode(e))),t.next=12;break;case 9:t.prev=9,t.t0=t.catch(2),"NotFoundError"===t.t0.name&&8===t.t0.code&&t.t0.message.indexOf("disconnected")>=0&&(clearInterval(this.dataTimer),clearInterval(this.modemStateTimer),this.connectionError&&this.connectionError());case 12:this.canRead=!0;case 13:case"end":return t.stop()}},t,this,[[2,9]])}));return function(){return t.apply(this,arguments)}}()}]),t}();t.exports={Serial:w,LINE_STATES:v,FLOW_CONTROL:y}},function(t,e){t.exports=function(t){return t&&t.__esModule?t:{default:t}}},function(t,e,r){t.exports=r(3)},function(t,e,r){var n=function(){return this}()||Function("return this")(),i=n.regeneratorRuntime&&Object.getOwnPropertyNames(n).indexOf("regeneratorRuntime")>=0,o=i&&n.regeneratorRuntime;if(n.regeneratorRuntime=void 0,t.exports=r(4),i)n.regeneratorRuntime=o;else try{delete n.regeneratorRuntime}catch(t){n.regeneratorRuntime=void 0}},function(t,e){!function(e){"use strict";var r,n=Object.prototype,i=n.hasOwnProperty,o="function"==typeof Symbol?Symbol:{},a=o.iterator||"@@iterator",u=o.asyncIterator||"@@asyncIterator",s=o.toStringTag||"@@toStringTag",c="object"==typeof t,f=e.regeneratorRuntime;if(f)c&&(t.exports=f);else{(f=e.regeneratorRuntime=c?t.exports:{}).wrap=w;var l="suspendedStart",h="suspendedYield",d="executing",p="completed",v={},y={};y[a]=function(){return this};var m=Object.getPrototypeOf,g=m&&m(m(I([])));g&&g!==n&&i.call(g,a)&&(y=g);var x=k.prototype=T.prototype=Object.create(y);S.prototype=x.constructor=k,k.constructor=S,k[s]=S.displayName="GeneratorFunction",f.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===S||"GeneratorFunction"===(e.displayName||e.name))},f.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,k):(t.__proto__=k,s in t||(t[s]="GeneratorFunction")),t.prototype=Object.create(x),t},f.awrap=function(t){return{__await:t}},O(C.prototype),C.prototype[u]=function(){return this},f.AsyncIterator=C,f.async=function(t,e,r,n){var i=new C(w(t,e,r,n));return f.isGeneratorFunction(e)?i:i.next().then(function(t){return t.done?t.value:i.next()})},O(x),x[s]="Generator",x[a]=function(){return this},x.toString=function(){return"[object Generator]"},f.keys=function(t){var e=[];for(var r in t)e.push(r);return e.reverse(),function r(){for(;e.length;){var n=e.pop();if(n in t)return r.value=n,r.done=!1,r}return r.done=!0,r}},f.values=I,_.prototype={constructor:_,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=r,this.done=!1,this.delegate=null,this.method="next",this.arg=r,this.tryEntries.forEach(R),!t)for(var e in this)"t"===e.charAt(0)&&i.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=r)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var e=this;function n(n,i){return u.type="throw",u.arg=t,e.next=n,i&&(e.method="next",e.arg=r),!!i}for(var o=this.tryEntries.length-1;o>=0;--o){var a=this.tryEntries[o],u=a.completion;if("root"===a.tryLoc)return n("end");if(a.tryLoc<=this.prev){var s=i.call(a,"catchLoc"),c=i.call(a,"finallyLoc");if(s&&c){if(this.prev<a.catchLoc)return n(a.catchLoc,!0);if(this.prev<a.finallyLoc)return n(a.finallyLoc)}else if(s){if(this.prev<a.catchLoc)return n(a.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return n(a.finallyLoc)}}}},abrupt:function(t,e){for(var r=this.tryEntries.length-1;r>=0;--r){var n=this.tryEntries[r];if(n.tryLoc<=this.prev&&i.call(n,"finallyLoc")&&this.prev<n.finallyLoc){var o=n;break}}o&&("break"===t||"continue"===t)&&o.tryLoc<=e&&e<=o.finallyLoc&&(o=null);var a=o?o.completion:{};return a.type=t,a.arg=e,o?(this.method="next",this.next=o.finallyLoc,v):this.complete(a)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),v},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),R(r),v}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if("throw"===n.type){var i=n.arg;R(r)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(t,e,n){return this.delegate={iterator:I(t),resultName:e,nextLoc:n},"next"===this.method&&(this.arg=r),v}}}function w(t,e,r,n){var i=e&&e.prototype instanceof T?e:T,o=Object.create(i.prototype),a=new _(n||[]);return o._invoke=function(t,e,r){var n=l;return function(i,o){if(n===d)throw new Error("Generator is already running");if(n===p){if("throw"===i)throw o;return j()}for(r.method=i,r.arg=o;;){var a=r.delegate;if(a){var u=L(a,r);if(u){if(u===v)continue;return u}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(n===l)throw n=p,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);n=d;var s=b(t,e,r);if("normal"===s.type){if(n=r.done?p:h,s.arg===v)continue;return{value:s.arg,done:r.done}}"throw"===s.type&&(n=p,r.method="throw",r.arg=s.arg)}}}(t,r,a),o}function b(t,e,r){try{return{type:"normal",arg:t.call(e,r)}}catch(t){return{type:"throw",arg:t}}}function T(){}function S(){}function k(){}function O(t){["next","throw","return"].forEach(function(e){t[e]=function(t){return this._invoke(e,t)}})}function C(t){var e;this._invoke=function(r,n){function o(){return new Promise(function(e,o){!function e(r,n,o,a){var u=b(t[r],t,n);if("throw"!==u.type){var s=u.arg,c=s.value;return c&&"object"==typeof c&&i.call(c,"__await")?Promise.resolve(c.__await).then(function(t){e("next",t,o,a)},function(t){e("throw",t,o,a)}):Promise.resolve(c).then(function(t){s.value=t,o(s)},a)}a(u.arg)}(r,n,e,o)})}return e=e?e.then(o,o):o()}}function L(t,e){var n=t.iterator[e.method];if(n===r){if(e.delegate=null,"throw"===e.method){if(t.iterator.return&&(e.method="return",e.arg=r,L(t,e),"throw"===e.method))return v;e.method="throw",e.arg=new TypeError("The iterator does not provide a 'throw' method")}return v}var i=b(n,t.iterator,e.arg);if("throw"===i.type)return e.method="throw",e.arg=i.arg,e.delegate=null,v;var o=i.arg;return o?o.done?(e[t.resultName]=o.value,e.next=t.nextLoc,"return"!==e.method&&(e.method="next",e.arg=r),e.delegate=null,v):o:(e.method="throw",e.arg=new TypeError("iterator result is not an object"),e.delegate=null,v)}function E(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function R(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function _(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(E,this),this.reset(!0)}function I(t){if(t){var e=t[a];if(e)return e.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var n=-1,o=function e(){for(;++n<t.length;)if(i.call(t,n))return e.value=t[n],e.done=!1,e;return e.value=r,e.done=!0,e};return o.next=o}}return{next:j}}function j(){return{value:r,done:!0}}}(function(){return this}()||Function("return this")())},function(t,e){function r(t,e,r,n,i,o,a){try{var u=t[o](a),s=u.value}catch(t){return void r(t)}u.done?e(s):Promise.resolve(s).then(n,i)}t.exports=function(t){return function(){var e=this,n=arguments;return new Promise(function(i,o){var a=t.apply(e,n);function u(t){r(a,i,o,u,s,"next",t)}function s(t){r(a,i,o,u,s,"throw",t)}u(void 0)})}}},function(t,e){t.exports=function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}},function(t,e){function r(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}t.exports=function(t,e,n){return e&&r(t.prototype,e),n&&r(t,n),t}}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,