/*!
 * 
 *   @tibbotech/web-serial-library v1.0.0
 *   https://github.com/tibbotech/web-serial-library
 *
 *   Copyright (c) Tibbo Technology (https:github.com/tibbotech)
 *
 *   This source code is licensed under the MIT license found in the
 *   LICENSE file in the root directory of this source tree.
 *
 */
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["TibboWebSerial"] = factory();
	else
		root["TibboWebSerial"] = factory();
})(self, () => {
return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/events/events.js":
/*!***************************************!*\
  !*** ./node_modules/events/events.js ***!
  \***************************************/
/***/ ((module) => {

"use strict";
eval("// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\nvar R = typeof Reflect === 'object' ? Reflect : null\nvar ReflectApply = R && typeof R.apply === 'function'\n  ? R.apply\n  : function ReflectApply(target, receiver, args) {\n    return Function.prototype.apply.call(target, receiver, args);\n  }\n\nvar ReflectOwnKeys\nif (R && typeof R.ownKeys === 'function') {\n  ReflectOwnKeys = R.ownKeys\n} else if (Object.getOwnPropertySymbols) {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target)\n      .concat(Object.getOwnPropertySymbols(target));\n  };\n} else {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target);\n  };\n}\n\nfunction ProcessEmitWarning(warning) {\n  if (console && console.warn) console.warn(warning);\n}\n\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\n  return value !== value;\n}\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nmodule.exports = EventEmitter;\nmodule.exports.once = once;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._eventsCount = 0;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nfunction checkListener(listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n}\n\nObject.defineProperty(EventEmitter, 'defaultMaxListeners', {\n  enumerable: true,\n  get: function() {\n    return defaultMaxListeners;\n  },\n  set: function(arg) {\n    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');\n    }\n    defaultMaxListeners = arg;\n  }\n});\n\nEventEmitter.init = function() {\n\n  if (this._events === undefined ||\n      this._events === Object.getPrototypeOf(this)._events) {\n    this._events = Object.create(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');\n  }\n  this._maxListeners = n;\n  return this;\n};\n\nfunction _getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return _getMaxListeners(this);\n};\n\nEventEmitter.prototype.emit = function emit(type) {\n  var args = [];\n  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\n  var doError = (type === 'error');\n\n  var events = this._events;\n  if (events !== undefined)\n    doError = (doError && events.error === undefined);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    var er;\n    if (args.length > 0)\n      er = args[0];\n    if (er instanceof Error) {\n      // Note: The comments on the `throw` lines are intentional, they show\n      // up in Node's output if this results in an unhandled exception.\n      throw er; // Unhandled 'error' event\n    }\n    // At least give some kind of context to the user\n    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\n    err.context = er;\n    throw err; // Unhandled 'error' event\n  }\n\n  var handler = events[type];\n\n  if (handler === undefined)\n    return false;\n\n  if (typeof handler === 'function') {\n    ReflectApply(handler, this, args);\n  } else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      ReflectApply(listeners[i], this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  checkListener(listener);\n\n  events = target._events;\n  if (events === undefined) {\n    events = target._events = Object.create(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener !== undefined) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (existing === undefined) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n        prepend ? [listener, existing] : [existing, listener];\n      // If we've already got an array, just append.\n    } else if (prepend) {\n      existing.unshift(listener);\n    } else {\n      existing.push(listener);\n    }\n\n    // Check for listener leak\n    m = _getMaxListeners(target);\n    if (m > 0 && existing.length > m && !existing.warned) {\n      existing.warned = true;\n      // No error code for this since it is a Warning\n      // eslint-disable-next-line no-restricted-syntax\n      var w = new Error('Possible EventEmitter memory leak detected. ' +\n                          existing.length + ' ' + String(type) + ' listeners ' +\n                          'added. Use emitter.setMaxListeners() to ' +\n                          'increase limit');\n      w.name = 'MaxListenersExceededWarning';\n      w.emitter = target;\n      w.type = type;\n      w.count = existing.length;\n      ProcessEmitWarning(w);\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    if (arguments.length === 0)\n      return this.listener.call(this.target);\n    return this.listener.apply(this.target, arguments);\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = onceWrapper.bind(state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  checkListener(listener);\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      checkListener(listener);\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      checkListener(listener);\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      list = events[type];\n      if (list === undefined)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = Object.create(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else {\n          spliceOne(list, position);\n        }\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener !== undefined)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (events.removeListener === undefined) {\n        if (arguments.length === 0) {\n          this._events = Object.create(null);\n          this._eventsCount = 0;\n        } else if (events[type] !== undefined) {\n          if (--this._eventsCount === 0)\n            this._events = Object.create(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = Object.create(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners !== undefined) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (events === undefined)\n    return [];\n\n  var evlistener = events[type];\n  if (evlistener === undefined)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ?\n    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events !== undefined) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener !== undefined) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n};\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction spliceOne(list, index) {\n  for (; index + 1 < list.length; index++)\n    list[index] = list[index + 1];\n  list.pop();\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n\nfunction once(emitter, name) {\n  return new Promise(function (resolve, reject) {\n    function errorListener(err) {\n      emitter.removeListener(name, resolver);\n      reject(err);\n    }\n\n    function resolver() {\n      if (typeof emitter.removeListener === 'function') {\n        emitter.removeListener('error', errorListener);\n      }\n      resolve([].slice.call(arguments));\n    };\n\n    eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });\n    if (name !== 'error') {\n      addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });\n    }\n  });\n}\n\nfunction addErrorHandlerIfEventEmitter(emitter, handler, flags) {\n  if (typeof emitter.on === 'function') {\n    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);\n  }\n}\n\nfunction eventTargetAgnosticAddListener(emitter, name, listener, flags) {\n  if (typeof emitter.on === 'function') {\n    if (flags.once) {\n      emitter.once(name, listener);\n    } else {\n      emitter.on(name, listener);\n    }\n  } else if (typeof emitter.addEventListener === 'function') {\n    // EventTarget does not have `error` event semantics like Node\n    // EventEmitters, we do not listen for `error` events here.\n    emitter.addEventListener(name, function wrapListener(arg) {\n      // IE does not have builtin `{ once: true }` support so we\n      // have to do it manually.\n      if (flags.once) {\n        emitter.removeEventListener(name, wrapListener);\n      }\n      listener(arg);\n    });\n  } else {\n    throw new TypeError('The \"emitter\" argument must be of type EventEmitter. Received type ' + typeof emitter);\n  }\n}\n\n\n//# sourceURL=webpack://TibboWebSerial/./node_modules/events/events.js?");

/***/ }),

/***/ "./src/TibboWebSerial.js":
/*!*******************************!*\
  !*** ./src/TibboWebSerial.js ***!
  \*******************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const CONTROL_COMMANDS = {\n    IFC_ENABLE: 0x00,\n    SET_BAUDDIV: 0x01,\n    GET_BAUDDIV: 0x02,\n    SET_LINE_CTL: 0x03,\n    GET_LINE_CTL: 0x04,\n    SET_BREAK: 0x05,\n    IMM_CHAR: 0x06,\n    SET_MHS: 0x07,\n    GET_MDMSTS: 0x08,\n    SET_XON: 0x09,\n    SET_XOFF: 0x0A,\n    SET_EVENTMASK: 0x0B,\n    GET_EVENTMASK: 0x0C,\n    GET_EVENTSTATE: 0x16,\n    SET_CHAR: 0x0D,\n    GET_CHARS: 0x0E,\n    GET_PROPS: 0x0F,\n    GET_COMM_STATUS: 0x10,\n    RESET: 0x11,\n    PURGE: 0x12,\n    SET_FLOW: 0x13,\n    GET_FLOW: 0x14,\n    EMBED_EVENTS: 0x15,\n    GET_BAUDRATE: 0x1D,\n    SET_BAUDRATE: 0x1E,\n    SET_CHARS: 0x19,\n    VENDOR_SPECIFIC: 0xFF\n};\n\nconst LINE_STATES = {\n    DTR: 1,\n    RTS: 2,\n    CTS: 16,\n    DSR: 32,\n    RI: 64,\n    DCD: 128\n};\n\nconst FLOW_CONTROL = {\n    OFF: [0, 0, 0, 0],\n    CTS_RTS: [8, 144, 0, 0],\n    XON_XOFF: [0, 19, 400, 400]\n};\n\nconst SPECIAL_CHARACTERS = {\n    EOFCHAR: { index: 0, value: 0 },\n    ERRORCHAR: { index: 1, value: 0 },\n    BREAKCHAR: { index: 2, value: 0 },\n    EVENTCHAR: { index: 3, value: 0 },\n    XONCHAR: { index: 4, value: 17 },\n    XOFFCHAR: { index: 5, value: 19 }\n};\n\n\nconst EventEmitter = __webpack_require__(/*! events */ \"./node_modules/events/events.js\");\n\nlet bufferedData = '';\n\nclass Serial extends EventEmitter {\n    constructor(device, options) {\n        super();\n        this.usb = device;\n        this.requestTimedOut = false;\n        this.modemState = null;\n        this.DTR = null;\n        this.RTS = null;\n        this.CTS = null;\n        this.DSR = null;\n        this.RI = null;\n        this.DCD = null;\n\n        this.modemStateChanged = undefined;\n        this.getFlowControlCallback = undefined;\n        this.flowControlChanged = undefined;\n        this.baudChangeOK = undefined;\n        this.serDataArrival = undefined;\n        this.serDataSent = undefined;\n        this.connectFail = undefined;\n        this.connectOK = undefined;\n        this.disconnectOK = undefined;\n        this.connectionError = undefined;\n        this.autoReadData = options !== undefined && options.autoReadData !== undefined ? options.autoReadData : true;\n        this.flowControl = options !== undefined && options.flowControl !== undefined ? options.flowControl : 'OFF';\n        this.baud = options !== undefined && options.baud !== undefined ? options.baud : 38400;\n    }\n\n    async connect() {\n        try {\n            await this.usb.open();\n            await this.usb.selectConfiguration(1);\n            await this.usb.claimInterface(0);\n            await this.enable();\n            await this.setBaud(this.baud);\n            await this.setFlowControl(this.flowControl);\n            if (this.autoReadData) {\n                this.setTimers();\n            }\n            if (this.connectOK) this.connectOK();\n        } catch (ex) {\n            if (this.connectFail) this.connectFail();\n        }\n    }\n\n    async enable() {\n        await this.usb.controlTransferOut({\n            requestType: 'vendor',\n            recipient: 'device',\n            request: CONTROL_COMMANDS.IFC_ENABLE,\n            index: 0x00,\n            value: 0x01\n        });\n    }\n\n    async initialize(device) {\n        this.usb = device;\n        this.deviceId = device.deviceId;\n\n        await this.usb.open();\n        await this.usb.selectConfiguration(1);\n        await this.usb.claimInterface(0);\n        //enable\n        await this.enable();\n        //set mhs handshake to off\n        await this.setMHS(0x03);\n        //set baud rate\n        await this.setBaud(this.baud);\n\n        if (this.dataTimer != undefined) {\n            clearInterval(this.dataTimer);\n        }\n\n        this.dataTimer = setInterval(this.readTimer.bind(this), 1);\n        this.canRead = true;\n    }\n\n    setTimers() {\n        if (this.dataTimer !== undefined) {\n            clearInterval(this.dataTimer);\n        }\n        this.dataTimer = setInterval(this.readTimer.bind(this), 1);\n        this.canRead = true;\n        if (this.modemStateTimer !== undefined) {\n            clearInterval(this.modemStateTimer);\n        }\n        this.modemStateTimer = setInterval(this.getModemState.bind(this, this.usb), 1);\n    }\n\n    async disconnect() {\n        clearInterval(this.dataTimer);\n        clearInterval(this.modemStateTimer);\n        await this.usb.close();\n        if (this.disconnectOK) this.disconnectOK();\n    }\n\n    updateModemState(modemState) {\n        this.modemState = modemState;\n        this.DTR = (modemState & LINE_STATES.DTR) > 0 ? 1 : 0;\n        this.RTS = (modemState & LINE_STATES.RTS) > 0 ? 1 : 0;\n        this.CTS = (modemState & LINE_STATES.CTS) > 0 ? 1 : 0;\n        this.DSR = (modemState & LINE_STATES.DSR) > 0 ? 1 : 0;\n        this.RI = (modemState & LINE_STATES.RI) > 0 ? 1 : 0;\n        this.DCD = (modemState & LINE_STATES.DCD) > 0 ? 1 : 0;\n    }\n\n    async setBaud(baud) {\n        this.baud = baud;\n        let arr = [0, 0, 0, 0];\n        for (let i = 0; i < arr.length; i++) {\n            let byte = baud & 0xff;\n            arr[i] = byte;\n            baud = (baud - byte) / 256;\n        }\n        await this.usb.controlTransferOut({\n            requestType: 'vendor',\n            recipient: 'device',\n            request: CONTROL_COMMANDS.SET_BAUDRATE,\n            index: 0x00,\n            value: 0\n        }, new Uint8Array(arr));\n        if (this.baudChangeOK) this.baudChangeOK(this.baud);\n    }\n\n    async initializeSpecialCharacters() {\n        this.setChar(SPECIAL_CHARACTERS.XOFFCHAR.index, SPECIAL_CHARACTERS.XOFFCHAR.value);\n        this.setChar(SPECIAL_CHARACTERS.XONCHAR.index, SPECIAL_CHARACTERS.XONCHAR.value);\n    }\n\n    async setChar(SpecialCharacterIndex, SpecialCharacterValue) {\n        await this.usb.controlTransferOut({\n            requestType: 'vendor',\n            recipient: 'device',\n            request: CONTROL_COMMANDS.SET_CHAR,\n            index: 0x00,\n            value: ((SpecialCharacterIndex << 8) & 0xFF00) | SpecialCharacterValue\n        });\n    }\n\n    async setMHS(value) {\n        await this.usb.controlTransferOut({\n            requestType: 'vendor',\n            recipient: 'device',\n            request: CONTROL_COMMANDS.SET_MHS,\n            index: 0x00,\n            value: value | 0x200 | 0x100\n        });\n    }\n\n    async getBaudRate() {\n        const r = await this.usb.controlTransferIn({\n            requestType: 'vendor',\n            recipient: 'device',\n            request: CONTROL_COMMANDS.SET_BAUDDIV,\n            index: 0x00,\n            value: 0x0\n        }, 1);\n        return new Uint8Array(r.data.buffer);\n    }\n\n    async getModemState() {\n        let result = await this.usb.controlTransferIn({\n            requestType: 'vendor',\n            recipient: 'device',\n            request: CONTROL_COMMANDS.GET_MDMSTS,\n            index: 0x00,\n            value: 0x0\n        }, 1);\n        result = result.data.getInt8();\n        if (result !== this.modemState) {\n            this.updateModemState(result);\n            if (this.modemStateChanged) {\n                this.modemStateChanged(this.DTR, this.RTS, this.CTS, this.DSR, this.RI, this.DCD);\n            }\n        }\n    }\n\n    async getFlowControl() {\n        let result = await this.usb.controlTransferIn({\n            requestType: 'vendor',\n            recipient: 'device',\n            request: CONTROL_COMMANDS.GET_FLOW,\n            index: 0x00,\n            value: 0x0\n        }, 16);\n        var arr = new Int32Array(result.data.buffer);\n        arr = JSON.stringify(Array.from(arr));\n        const entries = Object.entries(FLOW_CONTROL);\n        for (let i = 0; i < entries.length; i++) {\n            if (JSON.stringify(entries[i][1]) === arr) {\n                if (this.getFlowControlCallback) this.getFlowControlCallback(entries[i][0]);\n            }\n        }\n    }\n\n    async setFlowControl(value) {\n        let arr = FLOW_CONTROL[value];\n        await this.usb.controlTransferOut({\n            requestType: 'vendor',\n            recipient: 'device',\n            request: 0x13,\n            index: 0x00,\n            value: 0x0\n        }, new Int32Array(arr));\n        if (this.flowControlChanged) this.flowControlChanged(value);\n    }\n\n    async write(data) {\n        if (data.length > 0) {\n            await this.usb.transferOut(2, data);\n            if (this.serDataSent) this.serDataSent(data);\n        }\n    }\n    \n    async toggleLINE(line) {\n        await this.setMHS(line ^ this.modemState);\n        console.log('Line toggled');\n    }\n\n    async read() {\n        if (bufferedData !== '') {\n            this.serDataArrival(bufferedData);\n            bufferedData = '';\n        }\n    }\n\n    async readAsync() {\n        const r = await this.usb.transferIn(2, 64);\n        return new Uint8Array(r.data.buffer);\n    }\n\n    async autoRead() {\n        const r = await this.usb.transferIn(2, 64);\n        return new Uint8Array(r.data.buffer);\n    }\n\n    async readTimer() {\n        if (this.canRead && this.usb != null) {\n            this.canRead = false;\n            try {\n                let data = await this.autoRead();\n                if (data) {\n                    if (this.serDataArrival !== undefined) {\n                        if (this.autoReadData) {\n                            this.serDataArrival(data);\n                        } else {\n                            bufferedData = bufferedData + data;\n                        }\n                    }\n                    this.emit('data', data);\n                }\n            } catch (ex) {\n                if (ex.name === 'NotFoundError' && ex.code === 8 && ex.message.indexOf('disconnected') >= 0) {\n                    clearInterval(this.dataTimer);\n                    clearInterval(this.modemStateTimer);\n                    if (this.connectionError) this.connectionError();\n                }\n            }\n            this.canRead = true;\n        }\n    }\n}\n\nmodule.exports = { Serial, LINE_STATES, FLOW_CONTROL };\n\n//# sourceURL=webpack://TibboWebSerial/./src/TibboWebSerial.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./src/TibboWebSerial.js");
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});